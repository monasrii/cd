//writelex.l
%{
int wc=0,lc=0,ch=0,sp=0;tc=0;

%}

%%

[\n] {lc++;ch++;}
[\t] {tc++;ch++;}
[ ] {sp++;ch++;}
[^ \n\t]+ {ch += yyleng; wc++;}

%%

int yywrap()
{
return 1;
}

int main(int argc , char* argv[]){

yyin = fopen(argv[1] , "r");
yylex();
printf("lines = %d \n chars = %d \n words=%d \n space =%d tabs =%d",lc,ch,wc,sp,tc);
return 0;
}

//lex writelex.l
//gcc lex.yy.c
//./a.out input

/*
Given a line of text, count the number of vowels, constants, digits, words, spaces, special characters.  [aeiouAEIOU]

Given a set of lines seperated by semicolon, attach line numbers to each line and display them.

Given a set of lines, some commented using //, identify these lines and delete them. Print the remaining uncommented lines.

Given a word, classify it as a C keyword or not.

Given a set of words, extract all the C keywords from them.





.       any character except newline
\n      newline
*       zero or more copies of the preceding expression
+       one or more copies of the preceding expression
?       zero or one copy of the preceding expression
^       beginning of line
$       end of line
a|b     a or b
(ab)+   one or more copies of ab (grouping)
"a+b"   literal "a+b" (C escapes still work)
[]      character class



abc     	abc
abc*    	ab abc abcc abccc ...
abc+    	abc abcc abccc ...
a(bc)+  	abc abcbc abcbcbc ...
a(bc)?  	a abc
[abc]   	one of: a, b, c
[a-z]   	any letter, a-z
[a\-z]  	one of: a, -, z
[-az]   	one of: -, a, z
[A-Za-z0-9]+ 	one or more alphanumeric characters
[ \t\n]+ 	whitespace
[^ab] 		anything except: a, b
[a^b] 		one of: a, ^, b
[a|b] 		one of: a, |, b
a|b 		one of: a, b
*/
